///////////////roman to interger///////////////////

   int Solution::romanToInt(string A) {
            int ans=0;
            for(int i=0;i<A.length();i++){
                if(A[i]=='M')ans+=1000;
                if(A[i]=='D')ans+=500;
                if(A[i]=='C' and (i==A.length()-1 or (A[i+1]!='D' and A[i+1]!='M')))ans+=100;
                else if(A[i]=='C'){
                    if(A[i+1]=='D')ans+=400;
                    if(A[i+1]=='M')ans+=900;
                    i++;continue;
                }
                if(A[i]=='L')ans+=50;
                if(A[i]=='X' and (i==A.length()-1 or (A[i+1]!='L' and A[i+1]!='C')))ans+=10;
                else if(A[i]=='X'){
                    if(A[i+1]=='L')ans+=40;
                    if(A[i+1]=='C')ans+=90;
                    i++;continue;
                }
                if(A[i]=='V')ans+=5;
                if(A[i]=='I' and (i==A.length()-1 or A[i+1]==A[i]))ans+=1;
                else if(A[i]=='I'){
                    if(A[i+1]=='X')ans+=9;
                    if(A[i+1]=='V')ans+=4;
                    i++;continue;
                }
            }
            return ans;
        }
     
     
     
/////////////////interger to roman///////////////////////////////////////

string Solution::intToRoman(int A) {
vector<pair<int,string>>v;
v.push_back(make_pair(1000,“M”));
v.push_back(make_pair(900,“CM”));
v.push_back(make_pair(500,“D”));
v.push_back(make_pair(400,“CD”));
v.push_back(make_pair(100,“C”));
v.push_back(make_pair(90,“XC”));
v.push_back(make_pair(50,“L”));
v.push_back(make_pair(40,“XL”));
v.push_back(make_pair(10,“X”));
v.push_back(make_pair(9,“IX”));
v.push_back(make_pair(5,“V”));
v.push_back(make_pair(4,“IV”));
v.push_back(make_pair(1,“I”));

int i{0};
string s;
while(A!=0){
    if(A>=v[i].first){
        int x=A/v[i].first;
        for(int j{1};j<=x;j++)
            s+=v[i].second;
        A=A%v[i].first;
    }
    i++;
}
return s;
}



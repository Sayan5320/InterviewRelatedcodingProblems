///////////////////////////////word ladder(using bfs)/////////////////////////////////
Input 1:
    A = "hit"
    B = "cog"
    C = ["hot", "dot", "dog", "lot", "log"]

Output 1:
    5

Explanation 1:
    "hit" -> "hot" -> "dot" -> "dog" -> "cog"
    
int Solution::solve(string a, string b, vector<string> &c) {
    unordered_set<string> s;
    for(string x : c) s.insert(x);
    s.insert(a);
    s.insert(b);
    queue<string> q;
    int ans=1;
    q.push(a);
    while(!q.empty())
    {
        int size = q.size();
        while(size--)
        {
            string x = q.front();
            q.pop();
            for(int i=0; i<x.length(); i++)
            {
                for(int j=0; j<26; j++)
                {
                    string temp = x;
                    temp[i] = 'a'+j;
                    if(temp == b)
                    {
                        return ans+1;
                    }
                    if(s.find(temp) != s.end())
                    {
                        q.push(temp);
                        s.erase(s.find(temp));
                    }
                }
            }
        }
        ++ans;
        
    }
    return 0;
}    


/////////////////////////////word ladder 2(using bfs)//////////////////////////////////
//////input////////
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
//////output////////
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
  

vector<vector<string> > Solution::findLadders(string start, string end, vector<string> &d) {
   queue<vector<string> >paths;
   vector<vector<string> >ans;
   paths.push({start});
   if(start==end){
       ans.push_back({start});
       return ans;
   }
   unordered_set<string>dict;
   for(int i=0; i<d.size(); i++){
       dict.insert(d[i]);
   }
   int level = 1;
   int min_level = INT_MAX;
   unordered_set<string>visited;
   while(!paths.empty()){
       vector<string> path = paths.front();
       paths.pop();
       if(path.size()>level){
           for(auto w: visited){
               dict.erase(w);
           }
           visited.clear();
           if(path.size()>min_level)
           break;
           else
           level = path.size();
       }
       string last = path.back();
       for(int i=0; i<last.length(); i++){
           string news = last;
           for(int j='a'; j<='z'; j++){
               news[i] = j;
               if(dict.find(news)!=dict.end()){
                   vector<string>newpath = path;
                   newpath.push_back(news);
                   visited.insert(news);
                   if(news==end){
                       min_level = level;
                       ans.push_back(newpath);
                   }
                   else{
                       paths.push(newpath);
                   }
               }
           }
       }
   }
   return ans;
}

/////////////////////Largest Continuous Subsequence//////////////////////
//LCS Problem Statement: Given two sequences, find the length of longest subsequence present in both of them.
//A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. 
//For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”.
//Variation of this problem in generally asked in many coding round for dream companies

//below added 3 different use cases of this problem using Dynamic Programming

//1. Simple Largest Continuous Subsequence using Dynamic Programming in C++

int lcs( char *X, char *Y, int m, int n )  
{  
    int L[m + 1][n + 1];  
    int i, j;  
      

  for (i = 0; i <= m; i++)  
    {  
        for (j = 0; j <= n; j++)  
        {  
        if (i == 0 || j == 0)  
            L[i][j] = 0;  
      
        else if (X[i - 1] == Y[j - 1])  
            L[i][j] = L[i - 1][j - 1] + 1;  
      
        else
            L[i][j] = max(L[i - 1][j], L[i][j - 1]);  
        }  
    }  
    return L[m][n];  
}  



//2. Simple Largest Continuous Subsequence using Dynamic Programming in C++ 

//used backtracking to previous op dowm matrix obtained for printing the elements in LCS
 {  int index = L[m][n]; 
   char lcs[index+1]; 
   lcs[index] = '\0';
  

   int i = m, j = n; 
   while (i > 0 && j > 0) 
   { 
      // If current character in X[] and Y are same, then 
      // current character is part of LCS 
      if (X[i-1] == Y[j-1]) 
      { 
          lcs[index-1] = X[i-1]; // Put current character in result 
          i--; j--; index--;     // reduce values of i, j and index 
      } 
  
      // If not same, then find the larger of two and 
      // go in the direction of larger value 
      else if (L[i-1][j] > L[i][j-1]) 
         i--; 
      else
         j--; 
   }
   cout<< lcs; 
} 


//3. Simple Longest Increasing Subsequence using Dynamic Programming in C++
int lis( int arr[], int n )  
{  
    int lis[n]; 
   
    lis[0] = 1;    
  
 
    for (int i = 1; i < n; i++ )  
    { 
        lis[i] = 1; 
        for (int j = 0; j < i; j++ )   
            if ( arr[i] > arr[j] && lis[i] < lis[j] + 1)  
                lis[i] = lis[j] + 1;  
    }  
    return *max_element(lis, lis+n); 
}  

//code contributed by Sharmila Biswas

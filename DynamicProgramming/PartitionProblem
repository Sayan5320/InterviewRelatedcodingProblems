///////////////////////Problem statement///////////////////////////////////////////////////
Partition problem is to determine whether a given set can be partitioned into two subsets such that the sum of elements in both subsets is the same. 
This is a very common question asked in coding round as well as in technical rounds 
below is a code for the same in c++/////////////////////////////////////////////////////////
//1. This is a very easy recursive C++ program for partition problem
//2.Using Dynamic Programming based C++ program 
//3.Using Dynamic programming with Space Complexity Optimized C++ program


//1. This is a very easy recursive C++ program for partition problem
//starting of the code

#include <bits/stdc++.h>
using namespace std;


bool isSubsetSum(int arr[], int n, int sum)
{
	if (sum == 0)
		return true;
	if (n == 0 && sum != 0)
		return false;
	if (arr[n - 1] > sum)
		return isSubsetSum(arr, n - 1, sum);

return isSubsetSum(arr, n - 1, sum)
		|| isSubsetSum(arr, n - 1, sum - arr[n - 1]);
}

bool findPartiion(int arr[], int n)
{
	int sum = 0;
	for (int i = 0; i < n; i++)
		sum += arr[i];
	if (sum % 2 != 0)
		return false;
	return isSubsetSum(arr, n, sum / 2);
}
int main()
{
	int arr[]; //input array
	int n ;//size of arr
	if (findPartiion(arr, n) == true)
		cout << "Can be divided into two subsets of ";
	else
		cout << "Can not be divided into two subsets of equal size";
	return 0;
}

//2.Using Dynamic Programming based C++ program using memorization
#include <bits/stdc++.h>
using namespace std;
bool findPartiion(int arr[], int n)
{
	int sum = 0;
	int i, j;
	for (i = 0; i < n; i++)
		sum += arr[i];

	if (sum % 2 != 0)
		return false;

	bool part[sum / 2 + 1][n + 1];
	for (i = 0; i <= n; i++)
		part[0][i] = true;
for (i = 1; i <= sum / 2; i++)
		part[i][0] = false;

	// Fill the partition table in bottom up manner
	for (i = 1; i <= sum / 2; i++) {
		for (j = 1; j <= n; j++) {
			part[i][j] = part[i][j - 1];
			if (i >= arr[j - 1])
				part[i][j] = part[i][j]
							|| part[i - arr[j - 1]][j - 1];
		}
	}

	
	return part[sum / 2][n];
}

int main()
{
	int arr[]; //input array
	int n; size of array
	
	if (findPartiion(arr, n) == true)
		cout << "Can be divided into two subsets of equal "
				"sum";
	else
		cout << "Can not be divided into"
			<< " two subsets of equal sum";
	return 0;
}


//3. Dynamic programming with Space Complexity Optimized
#include <bits/stdc++.h>
using namespace std;

// Returns true if arr[] can be partitioned
// in two subsets of equal sum, otherwise false
bool findPartiion(int arr[], int n)
{
	int sum = 0;
	int i, j;

	// Calculate sum of all elements
	for (i = 0; i < n; i++)
		sum += arr[i];

	if (sum % 2 != 0)
		return false;

	bool part[sum / 2 + 1];

	// Initialze the part array
	// as 0
	for (i = 0; i <= sum / 2; i++) {
		part[i] = 0;
	}

	// Fill the partition table in bottom up manner

	for (i = 0; i < n; i++) {
		// the element to be included
		// in the sum cannot be
		// greater than the sum
		for (j = sum / 2; j >= arr[i];
			j--) { // check if sum - arr[i]
			// could be formed
			// from a subset
			// using elements
			// before index i
			if (part[j - arr[i]] == 1 || j == arr[i])
				part[j] = 1;
		}
	}

	return part[sum / 2];
}

// Driver Code
int main()
{
	int arr[] = { 1, 3, 3, 2, 3, 2 };
	int n = sizeof(arr) / sizeof(arr[0]);

	// Function call
	if (findPartiion(arr, n) == true)
		cout << "Can be divided into two subsets of equal "
				"sum";
	else
		cout << "Can not be divided into"
			<< " two subsets of equal sum";
	return 0;
}


// This code is contributed by Sharmila Biswas
